function Tests = modelParserTest()
Tests = functiontests(localfunctions);
end
%#ok<*DEFNU>




function testQuotes(This)
m = model('testQuotes.model');
% Descriptions of variables.
actDescript = get(m, 'description');
expDescript = struct( ...
    'x', 'Variable x', ...
    'y', 'Variable y', ...
    'z', 'Variable z' ...
    );
verifyEqual(This, actDescript, expDescript);
% Equation labels.
actLabel = get(m,'label');
expLabel = { ...
    'Equation x', ...
    'Equation y', ...
    'Equation z', ...
    };
verifyEqual(This, actLabel, expLabel);
end




function testForControlInQuotes(This)
m = model('testForControlInQuotes.model');
expLabel = { ...
    'Equation for X', ...
    'Equation for Y', ...
    'Equation for Z', ...
    };
actLabel = get(m,'labels');
assertEqual(This,actLabel,expLabel);
end




function testBracketsInQuotes(This)
m = model('testBracketsInQuotes.model');
% Descriptions of variables.
actDescript = get(m,'description');
expDescript = struct( ...
    'x','Variable x ([%])', ...
    'y','(Variable y)', ...
    'z','Variable z' ...
    );
verifyEqual(This,actDescript,expDescript);
% Equation labels.
actLabel = get(m,'label');
expLabel = { ...
    '[Equation x]((', ...
    '{Equation {y', ...
    'Equation} z}', ...
    };
verifyEqual(This,actLabel,expLabel);
end




function testAssignments(This)
m = model('testAssignment.model');
% Values assigned to variables in model file.
actAssign = get(m,'sstate');
expAssign = struct( ...
    'x',(1 + 2) + 1i, ...
    'y',complex(3*normpdf(2,1,0.5),2), ...
    'z',[1,2,3]*[4,5,6]' ...
    );
verifyEqual(This,actAssign,expAssign);
end




function testMultipleAssignments(This)
m = model('testMultipleAssignment.model');
% Values assigned to variables in model file.
actAssign = get(m, 'sstate');
expAssign = struct( ...
    'x', [1,2,3], ...
    'y', [4,5,6], ...
    'z', [1,1,1], ...
    'w', [NaN,NaN,NaN], ...
    'alp', [10,10,10], ...
    'bet', sin([1,2,3]) ...
    );
assertEqual(This, actAssign, expAssign);
end




function testAutoexogenize(This)
m = model('testAutoexogenize.model');
% Values assigned to variables in model file.
actAutoexog = autoexog(m);
expAutoexog = struct( );
expAutoexog.Dynamic = struct( ...
    'x', 'ex', ...
    'y', 'ey', ...
    'z', 'ez', ...
    'w', 'ew' ...
    );
expAutoexog.Steady = struct( );
assertEqual(This, actAutoexog, expAutoexog);

actAutoexog = autoexogenise(m);
expAutoexog = struct( ...
    'x', 'ex', ...
    'y', 'ey', ...
    'z', 'ez', ...
    'w', 'ew' ...
    );
assertEqual(This, actAutoexog, expAutoexog);
end




function testEvalTimeSubs(This)
eqtn = { ...
    'x{-1+1} - y{0} + z{-4} + x{10+10}', ...
    'x{0} + y{-0} + z{-0+1-1}', ...
    'x{0} + y{+-5} + z{+1}', ...
    'x{t-1} + y{t+4-4} + z{t+10}', ...
    'x{0}', ...
    };
[actEqtn, actMaxSh, actMinSh] = parser.theparser.Equation.evalTimeSubs(eqtn);
actEqtn = parser.Preparser.removeInsignificantWhs(actEqtn);

expEqtn = { ...
    'x - y + z{@-4} + x{@+20}', ...
    'x + y + z', ...
    'x + y{@-5} + z{@+1}', ...
    'x{@-1} + y + z{@+10}', ...
    'x', ...
};
expEqtn = parser.Preparser.removeInsignificantWhs(expEqtn);

expMaxSh = 20;
expMinSh = -5;

assertEqual(This, actEqtn, expEqtn);
assertEqual(This, actMaxSh, expMaxSh);
assertEqual(This, actMinSh, expMinSh);
end

