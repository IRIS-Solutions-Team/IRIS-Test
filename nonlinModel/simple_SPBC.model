%% Simple sticky price business cycle model
% by Jaromir Benes
%
% This is a simple sticky-price business model file. The model file
% describes variables, parameters and equations. Note that the model file
% does not specifies the tasks that will be performed with the model. The
% tasks will be set up in separate m-files, using standard Matlab functions
% and IRIS functions.

%% Declare variables, shocks, parameters

!transition_variables

   'Output' Y, 'Labour' N, 'Wage rate' W
   'Nominal marginal cost' Q, 'Consumption habit' H, 'Productivity' A
   'Final prices' P, 'Interest rate' R,
   'Price of capital' Pk
   'Rental price of capital' Rk
   'Households shadow value of wealth' Lambda
   'Inflation Q/Q' dP, 'Inflation Y/Y' d4P, 'Wage inflation Q/Q' dW
   'Real marginal cost' RMC
   
!transition_shocks

   'Consumption demand shock' Ey, 'Cost-push shock' Ep, 
   'Productivity shock' Ea, 'Policy shock' Er
   'Wage shock' Ew

!parameters

   alpha, beta, gamma, delta, k, pi, eta, psi
   chi, xiw, xip, rhoa, rhor, kappap, kappan
   
   Short_, Infl_, Growth_, Wage_

%
   
%% Declare measurement variables (observables)

!measurement_variables

   'Short-term rate' Short, 'Price inflation' Infl,
   'Output growth' Growth, 'Wage inflation' Wage
   
!measurement_shocks

   'Measurement error on price inflation' Mp,
   'Measurement error on wage inflation' Mw
 
%

%% Control linearisation vs log-linerisation
   
!log_variables

   !allbut
   Short, Infl, Growth, Wage
 
%
   
%% Write model equations

!transition_equations

   % Consumers.

   P*Lambda =# (1-chi)/(Y - chi*H) !! P*Y*Lambda = 1;
   Lambda = beta*R*Lambda{1} !! beta*R = alpha*pi;
   H = exp(Ey)*alpha*Y{-1} !! H = Y;
   
   xiw/(eta-1)*(dW/dW{-1} - 1) = ...
      beta*xiw/(eta-1)*(dW{1}/dW - 1 + Ew) ...
      + (eta/(eta-1)*N^psi/(Lambda*W) - 1) ...
      !! eta/(eta-1)*N^psi = Lambda*W;
   
   % Price of capital.

   Lambda*Pk = beta*Lambda{1}*(Rk{1} + (1-delta)*Pk{1});
   
   % Supply side.
   
   'Production function' Y = A * (N - (1-gamma)*$N)^gamma * k^(1-gamma);
   gamma*Q*Y =# W*(N - (1-gamma)*$N);
   (1-gamma)*Q*Y = Rk*k;
   
   'Phillips curve' xip/(eta-1)*(dP/dP{-1} - 1) = ...
      beta*xip/(eta-1)*(dP{1}/dP - 1 + Ep) ...
      + (eta/(eta-1)*RMC - 1) !! eta/(eta-1)*Q = P;
   
   RMC = Q/P !! RMC = (eta-1)/eta;
   
   % Productivity.

   log(A/A{-1}) = rhoa*log(A{-1}/A{-2}) + (1-rhoa)*log(alpha) + Ea;
   
   % Monetary policy.

   log(R) = rhor*log(R{-1}) + (1-rhor)*(log($R) ...
       + kappap*(log(dP{4}) - log(pi)) ...
      + kappan*(N/$N - 1)) + Er
      !! d4P = pi^4;
      
   % Q/Q and Y/Y inflation rates.

   dP = P/P{-1};
   d4P = P/P{-4};
   dW = W/W{-1};

%
   
%% Write measurement equations

!measurement_equations

   Short =  100*(R^4 - 1);
   Infl = 100*((P/P{-1})^4 - 1 + Mp);
   Wage = 100*((W/W{-1})^4 - 1 + Mw);
   Growth = 100*((Y/Y{-1})^4 - 1);
 
%
   
%% Write deterministic trends on measurement variables

!dtrends

   Short += Short_;
   Infl += Infl_;
   Growth += Growth_;
   Wage += Wage_;
   
%% Help on IRIS keywords used in this model file
%
% Use either |help| to display help in the command window, or |idoc|
% to display HTML help in a browser window.
%
%    help modellang/transitionvariables
%    help modellang/transitionshocks
%    help modellang/parameters
%    help modellang/logvariables
%    help modellang/allbut
%    help modellang/transitionequations
%    help modellang/measurementvariables
%    help modellang/measurementequations
%    help modellang/dtrends
%    help modellang/sstateref
%    help modellang/sstateversion
