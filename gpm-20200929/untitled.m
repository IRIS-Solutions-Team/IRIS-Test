
clear

disp Loading
load matlab.mat

disp Differentiating
m = differentiate(m);   

disp FirstOrder
    tmp = simulate( ...
        m, ri.dbin, rn ...
        , "Plan", P, ...  
        'SuccessOnly',true);

    o1 = solver.Options('IRIS-QaD', ...
        'MaxIterations', 500, ...
        'FunctionTolerance', 1e-6, ...
        'LastJacobUpdate', 0, ...       % -1 is default
        'Display', 100);
    o2 = solver.Options('IRIS-QaD', ...
        'MaxFinalations', 2000, ...
        'FunctionTolerance', 1e-6, ...
        'LastJacobUpdate', 2, ...
        'Reset', true, ...
        'Display', 100);
    solverOptSim = [o1, o2];  

d0 = ri.dbin;
P0 = P;

%{
d = ri.dbin;
d = databank.clip(d, -Inf, rn(2));
d = databank.copy(ri.dbin, "sourceNames", shka, "targetDb", d);
P = unendogenize(P, rn(3:end), @all);
P = unexogenize(P, rn(3:end), @all);
%}


disp Selective
sel = simulate( ...
    m, d0, rn ...
    , "Plan", P0 ...
    , "MaxFrames", 1 ...
    , "Method", "selective" ...
    , "Solver", solverOptSim ...
    , 'SuccessOnly',true);

% m2 = m;
% m2 = setBounds(m2, "RS_JP", [m2.rs_floor_JP, 10]);
% m2 = setBounds(m2, "RS_EZ", [m2.rs_floor_EZ, 10]);
% m2 = setBounds(m2, "RS_US", [m2.rs_floor_US, 10]);


% m2 = m;
% m2.rs_floor_JP = -100;
% m2.rs_floor_EZ = -100;
% m2.rs_floor_US = -100;
% m2.rs_floor_GB = -100;
%m2.rs_floor_CN = -100;
%m2.rs_floor_BR = -100;
%m2.rs_floor_IN = -100;
%m2.rs_floor_MX = -100;
%m2.rs_floor_RC = -100;
%m2.rs_floor_RU = -100;
%m2.rs_floor_ZA = -100;

sta = simulate( ...
    m, d0, rn ...
    , "Plan", P0 ...
    , "MaxFrames", Inf ...
    , "Method", "stacked" ...
    , "Blocks", ~true ...
    , "Initial", "firstOrderk" ...
    , "Solver", {"Iris-Newton", "SkipJacobUpdate", 0,'FunctionTolerance', 1e-7,'StepTolerance',1e-7, "functionNorm", Inf}...
    , 'SuccessOnly', true ...
);

