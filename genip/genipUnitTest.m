
testCase = matlab.unittest.FunctionTestCase.fromFunction(@(x)x);

% Set up Once

startQ = qq(1990,1);
endQ = qq(2050,4);
startY = convert(startQ, Frequency.YEARLY) + 1;
endY = convert(endQ, Frequency.YEARLY);
quarterly = cumprod(1 + Series(startQ:endQ, @randn)/100);
indicator = quarterly + Series(startQ:endQ, @randn)/100;
yearly = convert(quarterly, Frequency.YEARLY, "method", "sum");


%% Test Initial Condition

[interp, info] = genip( ...
    yearly, Frequency.QUARTERLY, 2, "sum" ...
    , "range", startY:endY ...
    , "hardLevel", clip(quarterly, -Inf, startQ+3) ...
);

assertEqual(testCase, interp(startQ+2:startQ+3), quarterly(startQ+2:startQ+3), "AbsTol", 1e-12);

[interp1, info1] = genip( ...
    yearly, Frequency.QUARTERLY, 2, "sum" ...
    , "range", startY:endY ...
    , "initials", clip(quarterly, -Inf, startQ+3) ...
);

assertEqual(testCase, interp(startQ+2:startQ+3), quarterly(startQ+2:startQ+3), "AbsTol", 1e-12);
assertEqual(testCase, interp.Data, interp1.Data, "AbsTol", 1e-12);



%% Test Initial Condition and Hard Level


for k = 4 : 40
    [interp, info] = genip( ...
        yearly, Frequency.QUARTERLY, 2, "sum" ...
        , "range", startY:endY ...
        , "hardLevel", clip(quarterly, -Inf, startQ+k) ...
    );

    [interp1, info1] = genip( ...
        yearly, Frequency.QUARTERLY, 2, "sum" ...
        , "range", startY:endY ...
        , "hardLevel", clip(quarterly, startQ+4, startQ+k) ...
        , "initials", clip(quarterly, -Inf, startQ+3) ...
    );

    assertEqual(testCase, interp(startQ+2:startQ+k), quarterly(startQ+2:startQ+k), "AbsTol", 1e-12);
    assertEqual(testCase, interp.Data, interp1.Data, 'absTol', 1e-12);
end


%% Test Hard Level but No Initial Condition

[interp1, info1] = genip( ...
    yearly, Frequency.QUARTERLY, 2, "sum" ...
    , "range", startY:endY ...
    , "hardLevel", clip(quarterly, startQ+4, startQ+12) ...
);

[interp2, info2] = genip( ...
    yearly, Frequency.QUARTERLY, 2, "sum" ...
    , "range", startY:endY ...
    , "initials", NaN ...
    , "hardLevel", clip(quarterly, -Inf, startQ+12) ...
);

assertEqual(testCase, interp1(startQ+4:end), interp2(startQ+4:end), "AbsTol", 1e-12);
assertEqual(testCase, interp1(startQ+(4:12)), quarterly(startQ+(4:12)), "AbsTol", 1e-12);
assertEqual(testCase, info1.Initials, info2.Initials, "AbsTol", 1e-12);


%% Test Indicator

interp1 = genip( ...
    yearly, Frequency.QUARTERLY, 2, "sum" ...
    , "range", startY:endY ...
    , "hardLevel", clip(quarterly, -Inf, startQ+40) ...
);

interp2 = genip( ...
    yearly, Frequency.QUARTERLY, 2, "sum" ...
    , "range", startY:endY ...
    , "hardLevel", clip(quarterly, -Inf, startQ+40) ...
    , "indicatorLevel", indicator ...
    , "indicatorModel", "ratio" ...
);

[~, r1] = acf(pct([interp1, indicator]));
[~, r2] = acf(pct([interp2, indicator]));

assertGreaterThan(testCase, r2(1), r1(2));


%% Test Indicator and Hard Level

indicator1 = indicator;
indicator2 = clip(indicator, startQ+38, Inf);
indicator2 = fillMissing(indicator2, startQ:endQ, "next");
hard = clip(quarterly, -Inf, startQ+40);

[interp1, info1] = genip( ...
    yearly, Frequency.QUARTERLY, 2, "sum" ...
    , "range", startY:endY ...
    , "hardLevel", hard ...
    , "indicatorLevel", indicator1 ...
    , "indicatorModel", "ratio" ...
);

[interp2, info2] = genip( ...
    yearly, Frequency.QUARTERLY, 2, "sum" ...
    , "range", startY:endY ...
    , "hardLevel", hard ...
    , "indicatorLevel", indicator2 ...
    , "indicatorModel", "ratio" ...
);

assertEqual(testCase, interp1(:), interp2(:), "AbsTol", 1e-9);

