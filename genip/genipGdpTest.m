
testCase = matlab.unittest.FunctionTestCase.fromFunction(@(x)x);


%{
db = databank.fromFred([
    "CLVMNACSCAB1GQDE->ge_gdp"
    "CLVMEURSCAB1GQEU28->eu_gdp"
]);
databank.toCSV(db, "genipGdpTest.csv", Inf);
%}

db = databank.fromCSV('genipGdpTest.csv');
db.eu_gdp_yearly = convert(db.eu_gdp, Frequency.YEARLY, 'Method=', @sum);

startInterp = yy(2000);
endInterp = yy(2017);
numInterpYears = round(endInterp - startInterp + 1);




%% Test Plain

[db.eu_gdp1, info1] = genip( ...
    db.eu_gdp_yearly, Frequency.QUARTERLY, 'Rate', @sum ...
    , 'Range=', startInterp:endInterp ...
);


assertEqual(testCase ...
    , getData(convert(db.eu_gdp1, 1, 'Method=', @sum), info1.LowRange) ...
    , getData(db.eu_gdp_yearly, info1.LowRange) ...
    , 'RelTol', 1e-10 ...
);




%% Test Conditioning Rate

condDates = qq(2009, 1);
condRate = 0.9;72;
[db.eu_gdp2, info2] = genip( ...
    db.eu_gdp_yearly, Frequency.QUARTERLY, 'Rate', @sum ...
    , 'Range=', startInterp:endInterp ...
    , 'Condition.Rate=', Series(condDates, condRate) ...
);

assertEqual(testCase ...
    , getData(convert(db.eu_gdp2, 1, 'Method=', @sum), info2.LowRange) ...
    , getData(db.eu_gdp_yearly, info2.LowRange) ...
    , 'RelTol', 1e-10 ...
);

assertEqual(testCase ...
    , getData(roc(db.eu_gdp2), condDates), condRate ...
    , 'RelTol', 1e-10 ...
);




%% Test Indicator Level and Transformed

[db.eu_gdp3, info3] = genip( ...
    db.eu_gdp_yearly, Frequency.QUARTERLY, 'Rate', @sum ...
    , 'Range=', startInterp:endInterp ...
    , 'Indicator.Level=', db.ge_gdp ...
    , 'Indicator.StdScale=', 1e-3 ...
);

[x, kobj] = sandbox.interpolateY2Q(db.eu_gdp_yearly, db.ge_gdp, startInterp:endInterp, 'Aggregation', 'sum');
return

[db.eu_gdp4, info4] = genip( ...
    db.eu_gdp_yearly, Frequency.QUARTERLY, 'Rate', @sum ...
    , 'Range=', startInterp:endInterp ...
    , 'Indicator.Rate=', roc(db.ge_gdp) ...
    , 'Indicator.StdScale=', 1e-3 ...
);

assertEqual(testCase ...
    , getData(convert(db.eu_gdp3, 1, 'Method=', @sum), info3.LowRange) ...
    , getData(db.eu_gdp_yearly, info3.LowRange) ...
    , 'RelTol', 1e-10 ...
);

assertEqual(testCase ...
    , getData(db.eu_gdp3, info3.HighRange) ...
    , getData(db.eu_gdp4, info4.HighRange) ...
)




%% Test Indicator and Conditioning Level

condDates = qq(2009, 1);
[db.eu_gdp5, info5] = genip( ...
    db.eu_gdp_yearly, Frequency.QUARTERLY, 'Rate', @sum ...
    , 'Range=', startInterp:endInterp ...
    , 'Condition.Level=', clip(db.eu_gdp, condDates) ...
    , 'Indicator.Level=', db.ge_gdp ...
);

assertEqual(testCase ...
    , getData(convert(db.eu_gdp5, 1, 'Method=', @sum), info5.LowRange) ...
    , getData(db.eu_gdp_yearly, info5.LowRange) ...
    , 'RelTol', 1e-10 ...
);

assertEqual(testCase ...
    , db.eu_gdp5(condDates), db.eu_gdp(condDates) ...
    , 'RelTol', 1e-10 ...
);





%% Test Indicator and Conditioning Diff

condDates = qq(2009, 1);
[db.eu_gdp6, info6] = genip( ...
    db.eu_gdp_yearly, Frequency.QUARTERLY, 'Rate', @sum ...
    , 'Range=', startInterp:endInterp ...
    , 'Condition.Diff=', clip(diff(db.eu_gdp), condDates) ...
    , 'Indicator.Level=', db.ge_gdp ...
);

assertEqual(testCase ...
    , getData(convert(db.eu_gdp6, 1, 'Method=', @sum), info6.LowRange) ...
    , getData(db.eu_gdp_yearly, info6.LowRange) ...
    , 'RelTol', 1e-10 ...
);

assertEqual(testCase ...
    , getData(diff(db.eu_gdp6), condDates), getData(diff(db.eu_gdp), condDates) ...
    , 'RelTol', 1e-8 ...
);





%% Test Indicator and Conditioning DiffDiff

diff2 = @(x)diff(diff(x));

condDates = qq(2009, 1);
[db.eu_gdp7, info7] = genip( ...
    db.eu_gdp_yearly, Frequency.QUARTERLY, 'Rate', @sum ...
    , 'Range=', startInterp:endInterp ...
    , 'Condition.DiffDiff=', clip(diff2(db.eu_gdp), condDates) ...
    , 'Indicator.Level=', db.ge_gdp ...
);

assertEqual(testCase ...
    , getData(convert(db.eu_gdp7, 1, 'Method=', @sum), info7.LowRange) ...
    , getData(db.eu_gdp_yearly, info7.LowRange) ...
    , 'RelTol', 1e-10 ...
);

assertEqual(testCase ...
    , getData(diff2(db.eu_gdp7), condDates), getData(diff2(db.eu_gdp), condDates) ...
    , 'RelTol', 1e-8 ...
);

