
%#ok<*VUNUS>

% Generate data 

%(
characters = ['a':'z', 'A':'Z'];

startDateQ = qq(2020,1);
endDateQ = startDateQ + 15;
startDateM = convert(startDateQ, 12, "ConversionMonth", "First");
endDateM = convert(endDateQ, 12, "ConversionMonth", "Last");
rangeQ = startDateQ : endDateQ;
rangeM =  startDateM : endDateM ; 

numPeriodsQ = numel(rangeQ);
numPeriodsM = numel(rangeM);

allNames = string.empty(1, 0);
db = struct( );
for i = 1 : 50
    name = string(characters(randi(numel(characters), 1, 8)));
    data = randn(numPeriodsQ, 1);
    db.(name) = Series(startDateQ, data);
    allNames(end+1) = name; %#ok<SAGROW>
end

m = Model.fromFile("test.model", "linear", true);
m.rho_x = 0.5;
m.rho_y = 0.8;
m.ss_x = 1;
m.ss_y = 10;
m = solve(m);
m = steady(m);
%)

% Remove existing report HTML files 

delete vanillaTest.*.html


% Create report 

report = rephrase.Report( ...
    "Lorem ipsum dolor sit amet" ...
    , "Subtitle", "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras id faucibus felis. Nunc vulputate orci nibh, in aliquam risus finibus viverra." ...
    ... , "Footer", "Duis ut ultricies lorem. Nullam faucibus pulvinar massa vel faucibus." ...
    , "InteractiveCharts", true ... % make it `false` for huge reports
    , "TableOfContents", true ...
    , "TableOfContentsDepth", 1 ...
    , "Logo", false ...
);

section1 = rephrase.Section("Section 1");

cond1 = {};
cond1{1} = struct('Bounds', [0, 0.5], 'Class', "rephrase-background-highlight-blue");

cond2 = {};
cond2{1} = struct('Bounds', [0, 0.5], 'Class', "rephrase-background-highlight-purple");

table1 = rephrase.Table("$(Table1)", rangeQ, "dateFormat", "YYYY:Q", "NumDecimals", 3, "FirstCell", "...", "unitsHeading", "Units", "pass", {"conditional", cond2}) ...
    + rephrase.Series("Inflation", db.(allNames(1)), "units", "% PA", "conditional", cond1, "class", "inflation") ...
    + rephrase.Series("GDP Growth", 0*db.(allNames(2)), "class", "gdp-growth") ...
    + rephrase.Series("Policy Rate", NaN*db.(allNames(3))) ...
    + rephrase.Heading("Table Heading", "class", "foo-bar") ...
    + rephrase.Series("USD Exchange Rate", db.(allNames(4))) ...
    + rephrase.Series("EUR Exchange Rate", db.(allNames(5)));

section1 + table1;

report ...
    + rephrase.Pagebreak() ...
    + section1;


grid1 = rephrase.Grid("Executive Summary", 3, 2, "pass", {"showTitle", true, "dateFormat", "YYYY:Q"});

    highlight1 = rephrase.Highlight(-Inf, qq(2020, 4), "line", struct('width', 3 , 'color', "#ff0000"));
    highlight2 = rephrase.Highlight(qq(2022, 1), Inf, "fillColor", [0, 100, 200, 0.1]);

    chart1 = rephrase.SeriesChart.fromSeries( ...
        { "Chart 1", startDateQ, endDateQ, "dateFormat", "Y:QQ", "Highlight", [highlight1, highlight2], "Layout", struct("font", struct("size", 30)) } ...
        , { "Series 101", db.(allNames(6)), "Type", "Bar" } ...
        , { "Series 102", db.(allNames(7)) } ...
    );

    chart2 = rephrase.Chart("Chart 2", startDateQ, endDateQ) ...
        + rephrase.Series("Series 201", db.(allNames(7)), "lineWidth", 8) ...
        + rephrase.Series("Series 202", db.(allNames(8)), "lineDash", "dashdot") ...
    ;

    chart3 = rephrase.Chart("Chart 3", startDateQ, endDateQ) ...
        + rephrase.Series("Series 301", db.(allNames(9)), "showLegend", false) ...
        + rephrase.Series("Series 302", db.(allNames(10))) ...
    ;

    chart4 = rephrase.Chart("Chart 4", startDateQ, endDateQ, "DateFormat", "MMM YYYY") ...
        + rephrase.Series("Series 401", db.(allNames(11)), "Color", "#000") ...
        + rephrase.Series("Series 402", db.(allNames(12))) ...
    ;

    chart5 = rephrase.Chart("Chart 5", startDateQ, endDateQ, "DateFormat", "MMM YYYY", "BarMode", "relative") ...
        + rephrase.Series("Series Wqa", db.(allNames(11)), "Type", "bar") ...
        + rephrase.Series("Series Oyn", db.(allNames(12)), "Type", "bar") ...
        + rephrase.Series("Series Hgr", db.(allNames(13)), "Type", "bar") ...
    ;

    h = rephrase.Highlight(5, 11);
    chart6 = rephrase.Chart("Chart 6", 0:20, "BarMode", "relative", "Highlight", h) ...
        + rephrase.Series("Series Wqa", Series(0:20, @randn), "Type", "bar") ...
        + rephrase.Series("Series Oyn", Series(0:20, @randn), "Type", "bar") ...
        + rephrase.Series("Series Hgr", Series(0:20, @randn), "Type", "bar") ...
    ;

report + (grid1 + chart1 + chart2 + chart3 + chart4 + chart5 + chart6);

report + rephrase.Pagebreak( );

table2 = rephrase.Table( ...
    "Comparison Table", rangeQ ...
    , "DateFormat", "YYYY:Q" ...
    , "NumDecimals", 3 ...
    , "DisplayRows", struct('Diff', true, 'Baseline', true, 'Alternative', true) ...
    , "RowTitles", struct('Diff', "Diff") ...
);

table2 ...
    + rephrase.DiffSeries("Unemployment Rate", db.(allNames(13)), db.(allNames(14))) ...
    + rephrase.DiffSeries("Output Gap", db.(allNames(15)), db.(allNames(16))) ...
    + rephrase.DiffSeries("Financial Conditions", db.(allNames(17)), db.(allNames(18))) ...
    + rephrase.DiffSeries("Foreign Demand", db.(allNames(19)), db.(allNames(20))) ...
    + rephrase.DiffSeries("Oil Prices", db.(allNames(21)), db.(allNames(22)), "units", "USD/b") ...
    + rephrase.DiffSeries("US Treasury Bill", db.(allNames(23)), db.(allNames(24))) ...
; 

report + table2;


text1 = rephrase.Text.fromFile( ...
    "Text section with formulas" ...
    , "sample.md" ...
    , "ParseFormulas", true ...
    , "HighlightCodeBlocks", true ...
);

report + text1;


code = print(m, "test.model", "steady", false, "markdown", true);

report ...
    + rephrase.Pagebreak() ...
    + rephrase.Text.fromString("Quarterly projection model", code) ...
    + rephrase.Pagebreak();


% Publish report 

%show(report)

if ~verLessThan('matlab', '9.9')
    disp("Publishing HTML");
    fileNames = build( ...
        report, "vanillaTest", db ...
        , "saveJSON", true ...
        , "source", ["local", "bundle", "web"] ...
        , "userStyle", "user-defined.css" ...
        , "colorScheme", "colorScheme.json" ...
        , "context", struct('Table1', "Table 1 Title") ...
        ..., "template", "./test-template.html" ...
    );
end

